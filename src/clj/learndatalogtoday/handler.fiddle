(ns learndatalogtoday.repl-fiddle
  (:require [learndatalogtoday.handler :as handler]
            [datomic.client.api :as d]))

(defn exercise-chapter [n]
  (reduce (fn [acc {:keys [question inputs :as exercise]}]
            (conj acc [(count acc)
                       question ((fn [[query & args]]
                                   (list 'comment
                                         (apply list
                                                (cond-> ['d/q \' (:value query) 'db]
                                                  (seq args) (into (map :value args))))))
                                 inputs)]))
          []
          (:exercises (handler/read-chapter n))))

(defn give-up [ch ex]
  (-> ch
      (handler/read-chapter)
      :exercises
      (get ex)
      :inputs
      first
      :correct-value))

(def schema (handler/read-file "db/schema.edn"))
(def seed-data (handler/read-file "db/data.edn"))
(def db (handler/init-db "movies" schema seed-data))

(comment

  (exercise-chapter 0)
  [[0 "Find all movies titles in the database."
    (comment (d/q '[:find ?title
                    :where
                    [_ :movie/title ?title]] db))]]


  :rcf)

(comment
  (exercise-chapter 1)
  [[0 "Find the entity ids of movies made in 1987"
    (comment (d/q '[:find ?e
                    :where
                    [?e :movie/year 1987]] db))]
   [1 "Find the entity-id **and** titles of movies in the database"
    (comment (d/q '[:find ?e ?title
                    :where
                    [?e :movie/title ?title]] db))]
   [2 "Find the name of all people in the database"
    (comment (d/q '[:find ?name
                    :where
                    [?p :person/name ?name]] db))]]
  :rcf)

(comment
  (exercise-chapter 2)
  [[0 "Find movie titles made in 1985"
    (comment (d/q '[:find ?title
                    :where
                    [?m :movie/year 1985]
                    [?m :movie/title ?title]] db))]

   [1 "What year was \"Alien\" released?"
    (comment (d/q '[:find ?year .
                    :where
                    [?m :movie/title "Alien"]
                    [?m :movie/year ?year]] db))]

   ["2 Who directed RoboCop? You will need to use `[<movie-eid> :movie/director <person-eid>]` to find the director for a movie."
    (comment (d/q '[:find ?name
                    :where
                    [?m :movie/title "RoboCop"]
                    [?m :movie/director ?d]
                    [?d :person/name ?name]] db))]

   ["3 Find directors who have directed Arnold Schwarzenegger in a movie."
    (comment (d/q '[:find ?name
                    :where
                    [?m :movie/cast ?c]
                    [?c :person/name "Arnold Schwarzenegger"]
                    [?m :movie/director ?d]
                    [?d :person/name ?name]] db))]]
  :rcf)

(comment
  (exercise-chapter 3)
  [[0 "Find movie title by year"
    (comment (d/q '[:find ?title
                    :in $ ?year
                    :where
                    [?m :movie/year ?year]
                    [?m :movie/title ?title]] db 1988))]

   [1 "Given a list of movie titles, find the title and the year that movie was released."
    (comment (->> (d/q '[:find ?title ?year
                         :in $ [?title ...]
                         :where
                         [?m :movie/title ?title]
                         [?m :movie/year ?year]]
                       db ["Lethal Weapon" "Lethal Weapon 2" "Lethal Weapon 3"])
                  (sort-by second))

             (->> (d/q '[:find ?title ?year
                         :keys movie/title movie/year
                         :in $ [?title ...]
                         :where
                         [?m :movie/title ?title]
                         [?m :movie/year ?year]]
                       db ["Lethal Weapon" "Lethal Weapon 2" "Lethal Weapon 3"])
                  (sort-by :movie/year))
             ;;=> (#:movie{:title "Lethal Weapon", :year 1987}
             ;;    #:movie{:title "Lethal Weapon 2", :year 1989}
             ;;    #:movie{:title "Lethal Weapon 3", :year 1992})

             (->> (d/q '[:find (pull ?m [:movie/title :movie/year])
                         :in $ [?title ...]
                         :where
                         [?m :movie/title ?title]]
                       db ["Lethal Weapon 3" "Lethal Weapon" "Lethal Weapon 2"])
                  (map first)
                  (sort-by :movie/year >)))]


   [2 "Find all movie `?title`s where the `?actor` and the `?director` has worked together"
    (comment (d/q '[:find ?title
                    :in $ ?actor ?director
                    :where
                    [?m :movie/cast ?c]
                    [?c :person/name ?actor]
                    [?m :movie/director ?d]
                    [?d :person/name ?director]
                    [?m :movie/title ?title]]
                  db "Michael Biehn" "James Cameron"))]

   [3 "Write a query that, given an actor name and a relation with movie-title/rating, finds the movie titles and corresponding rating for which that actor was a cast member."
    (comment
      (d/q
       '[:find ?title ?rating
         :in $ ?actor [[?title ?rating]]
         :where
         [?c :person/name ?actor]
         [?m :movie/cast ?c]
         [?m :movie/title ?title]]
       db
       "Mel Gibson"
       [["Die Hard" 8.3]
        ["Alien" 8.5]
        ["Lethal Weapon" 7.6]
        ["Commando" 6.5]
        ["Mad Max Beyond Thunderdome" 6.1]
        ["Mad Max 2" 7.6]
        ["Rambo: First Blood Part II" 6.2]
        ["Braveheart" 8.4]
        ["Terminator 2: Judgment Day" 8.6]
        ["Predator 2" 6.1]
        ["First Blood" 7.6]
        ["Aliens" 8.5]
        ["Terminator 3: Rise of the Machines" 6.4]
        ["Rambo III" 5.4]
        ["Mad Max" 7.0]
        ["The Terminator" 8.1]
        ["Lethal Weapon 2" 7.1]
        ["Predator" 7.8]
        ["Lethal Weapon 3" 6.6]
        ["RoboCop" 7.5]]))]]
  :rcf)

(comment
  (exercise-chapter 4)
  [[0
    "What attributes are associated with a given movie."
    (comment (d/q '[:find ?attr
                    :in $ ?title
                    :where
                    [?m :movie/title ?title]
                    [?m ?a]
                    [?a :db/ident ?attr]]
                  db "Commando"))]

   [1
    "Find the names of all people associated with a particular movie (i.e. both the actors and the directors)"
    (comment (d/q '[:find ?name
                    :in $ ?title [?attr ...]
                    :where
                    [?m :movie/title ?title]
                    [?m ?attr ?a]
                    [?a :person/name ?name]]
                  db "Alien" [:movie/cast :movie/director]))]


   [2
    "Find all available attributes, their type and their cardinality. This is essentially a query to find **the schema of the database**. To find all installed attributes you must use the `:db.install/attribute` attribute. You will also need to use the `:db/valueType` and `:db/cardinality` attributes as well as `:db/ident`."
    (comment (d/q '[:find ?attr ?type ?card
                    :where
                    [_ :db.install/attribute ?a]
                    [?a :db/valueType ?t]
                    [?a :db/cardinality ?c]
                    [?a :db/ident ?attr]
                    [?t :db/ident ?type]
                    [?c :db/ident ?card]]
                  db)

             (comment
               (give-up 4 2)
               (d/q '[:find ?attr ?type ?card
                      :where
                      [_ :db.install/attribute ?a]
                      [?a :db/valueType ?t]
                      [?a :db/cardinality ?c]
                      [?a :db/ident ?attr]
                      [?t :db/ident ?type]
                      [?c :db/ident ?card]]
                    db)))]


   [3
    "When was the seed data imported into the database? Grab the transaction of any datom in the database, e.g., `[_ :movie/title _ ?tx]` and work from there."
    (comment (d/q '[:find ?inst
                    :where
                    [_ :person/name _ ?tx]
                    [?tx :db/txInstant ?inst]]
                  db))]]


  (exercise-chapter 5)

  [[0 "Find movies older than a certain year (inclusive)"
    (comment (d/q '[:find ?title
                    :in $ ?year
                    :where
                    [?m :movie/year ?y]
                    [?m :movie/title ?title]
                    [(<= ?y ?year)]]
                  db 1979)

             (give-up 5 0))]


   [1 "Find **actors** older than Danny Glover"
    (comment (d/q '[:find ?actor
                    :where
                    [?dg :person/name "Danny Glover"]
                    [?dg :person/born ?dgb]
                    [_ :movie/cast ?c]
                    [?c :person/born ?ab]
                    [(< ?ab ?dgb)]
                    [?c :person/name ?actor]]
                  db)

             (give-up 5 1))]

   [2
    "Find movies newer than `?year` (inclusive) and has a `?rating` higher than the one supplied"
    (comment (d/q '[:find ?title
                    :in $ ?supplied-year ?supplied-rating [[?title ?rating]]
                    :where
                    [?m :movie/title ?title]
                    [?m :movie/year ?year]
                    [(<= ?supplied-year ?year)]
                    [(< ?supplied-rating ?rating)]]
                  db 1990 8.0 [["Die Hard" 8.3]
                               ["Alien" 8.5]
                               ["Lethal Weapon" 7.6]
                               ["Commando" 6.5]
                               ["Mad Max Beyond Thunderdome" 6.1]
                               ["Mad Max 2" 7.6]
                               ["Rambo: First Blood Part II" 6.2]
                               ["Braveheart" 8.4]
                               ["Terminator 2: Judgment Day" 8.6]
                               ["Predator 2" 6.1]
                               ["First Blood" 7.6]
                               ["Aliens" 8.5]
                               ["Terminator 3: Rise of the Machines" 6.4]
                               ["Rambo III" 5.4]
                               ["Mad Max" 7.0]
                               ["The Terminator" 8.1]
                               ["Lethal Weapon 2" 7.1]
                               ["Predator" 7.8]
                               ["Lethal Weapon 3" 6.6]
                               ["RoboCop" 7.5]])

             (give-up 5 2))]]
  :rcf)

(comment
  (exercise-chapter 6)
  [[0
    "Find people by age. Use the function `tutorial.fns/age` to find the age given a birthday and a date representing \"today\"."
    (comment (d/q '[:find ?name
                    :in $ ?age ?today
                    :where
                    [?p :person/born ?born]
                    [(tutorial.fns/age ?born ?today) ?p-age]
                    [(= ?age ?p-age)]
                    [?p :person/name ?name]]
                  db
                  63 #inst "2013-08-02T00:00:00.000-00:00"))]

   [1
    "Find people younger than Bruce Willis and their ages."
    (comment (d/q '[:find ?name ?age
                    :in $ ?today
                    :where
                    [?bw :person/name "Bruce Willis"]
                    [?bw :person/born ?bw-born]
                    [?p :person/born ?born]
                    [(< ?bw-born ?born)]
                    [(tutorial.fns/age ?born ?today) ?age]
                    [?p :person/name ?name]]
                  db
                  #inst "2013-08-02T00:00:00.000-00:00"))]

   [2
    "The birthday paradox states that in a room of 23 people there is a 50% chance that someone has the same birthday. Write a query to find who has the same birthday. Use the `<` predicate on the names to avoid duplicate answers. You can use (the deprecated) `.getDate` and `.getMonth` java `Date` methods."
    (comment (d/q '[:find ?name-1 ?name-2
                    :where
                    [?p1 :person/name ?name-1]
                    [?p2 :person/name ?name-2]
                    [?p1 :person/born ?b1]
                    [?p2 :person/born ?b2]
                    [(.getMonth ?b1) ?m]
                    [(.getMonth ?b2) ?m]
                    [(.getDate ?b1) ?d]
                    [(.getDate ?b2) ?d]
                    [(< ?name-1 ?name-2)]]
                  db))]]

  :rcf)

(comment
  (exercise-chapter 7)
  [[0 "`count` the number of movies in the database"
    (comment (d/q '[:find (count ?m)
                    :where
                    [?m :movie/title]]
                  db))]

   [1 "Find the birth date of the oldest person in the database."
    (comment (d/q '[:find (min ?born)
                    :where
                    [?p :person/born ?born]]
                  db))]
   [2
    "Given a collection of actors and (the now familiar) ratings data. Find the average rating for each actor. The query should return the actor name and the `avg` rating."
    (comment
      (d/q
       '[:find ?actor (avg ?rating)
         :in $ [?actor ...] [[?title ?rating] ...]
         :where
         [?m :movie/title ?title]
         [?m :movie/cast ?c]
         [?c :person/name ?actor]]
       db
       ["Sylvester Stallone" "Arnold Schwarzenegger" "Mel Gibson"]
       [["Die Hard" 8.3]
        ["Alien" 8.5]
        ["Lethal Weapon" 7.6]
        ["Commando" 6.5]
        ["Mad Max Beyond Thunderdome" 6.1]
        ["Mad Max 2" 7.6]
        ["Rambo: First Blood Part II" 6.2]
        ["Braveheart" 8.4]
        ["Terminator 2: Judgment Day" 8.6]
        ["Predator 2" 6.1]
        ["First Blood" 7.6]
        ["Aliens" 8.5]
        ["Terminator 3: Rise of the Machines" 6.4]
        ["Rambo III" 5.4]
        ["Mad Max" 7.0]
        ["The Terminator" 8.1]
        ["Lethal Weapon 2" 7.1]
        ["Predator" 7.8]
        ["Lethal Weapon 3" 6.6]
        ["RoboCop" 7.5]]))]]
  :rcf)

(comment
  (exercise-chapter 8)
  [[0
      "Write a rule `[movie-year ?title ?year]` where `?title` is the title of some movie and `?year` is that movies release year."
      (comment (d/q \' [:find ?title :in $ % :where [movie-year ?title 1991]] db [[(movie-year ?title ?year) ...]]))]
     [1
      "Two people are friends if they have worked together in a movie. Write a rule `[friends ?p1 ?p2]` where `p1` and `p2` are person entities. Try with a few different `?name` inputs to make sure you got it right. There might be some edge cases here."
      (comment
       (d/q
        \'
        [:find ?friend :in $ % ?name :where [?p1 :person/name ?name] (friends ?p1 ?p2) [?p2 :person/name ?friend]]
        db
        [[(friends ?p1 ?p2) ...]]
        "Sigourney Weaver"))]
     [2
      "Write a rule `[sequels ?m1 ?m2]` where `?m1` and `?m2` are movie entities. You'll need to use the attribute `:movie/sequel`. To implement this rule correctly you can think of the problem like this: A movie `?m2` is a sequel of `?m1` if either \n* `?m2` is the \"direct\" sequel of `m1` **or** \n* `?m2` is the sequel of some movie `?m` **and** that movie `?m` is the sequel to `?m1`.\n\nThere are (at least) three different ways to write the above query. Try to find all three solutions."
      (comment
       (d/q
        \'
        [:find ?sequel :in $ % ?title :where [?m :movie/title ?title] (sequels ?m ?s) [?s :movie/title ?sequel]]
        db
        [[(sequels ?m1 ?m2) ...]]
        "Mad Max"))]]
  :rcf)

(comment
  (exercise-chapter 9) ;; doesn't work, manual labor below
  [0 "Write a rule [movie-year ?title ?year] where ?title is the title of some movie and ?year is that movies release year."
   (comment
     (d/q '[:find ?title
            :in $ %
            :where [movie-year ?title 1991]]
          db
          '[[(movie-year ?title ?year)
             [?m :movie/year ?year]
             [?m :movie/title ?title]]])
     )]

  [1 "Two people are friends if they have worked together in a movie. Write a rule [friends ?p1 ?p2] where p1 and p2 are person entities. Try with a few different ?name inputs to make sure you got it right. There might be some edge cases here."

   (comment
     (d/q '[:find ?friend
            :in $ % ?name
            :where
            [?p1 :person/name ?name]
            (friends ?p1 ?p2)
            [?p2 :person/name ?friend]]
          db
          '[[(friends ?p1 ?p2)
             [?m :movie/cast ?p1]
             [?m :movie/cast ?p2]
             [(not= ?p1 ?p2)]]
            [(friends ?p1 ?p2)
             [?m :movie/cast ?p2]
             [?m :movie/director ?p1]
             [(not= ?p1 ?p2)]]
            [(friends ?p1 ?p2)
             (friends ?p2 ?p1)]]
          "Mel Gibson")
     )]

  [2 "Write a rule [sequels ?m1 ?m2] where ?m1 and ?m2 are movie entities. You'll need to use the attribute :movie/sequel.
      To implement this rule correctly you can think of the problem like this: A movie ?m2 is a sequel of ?m1 if either

      * ?m2 is the “direct” sequel of m1 or
      ™ ?m2 is the sequel of some movie ?m and that movie ?m is the sequel to ?m1.

      There are (at least) three different ways to write the above query. Try to find all three solutions."

   (comment
     (d/q '[:find ?title
            :where
            [?m :movie/title ?title]]
          db)

     (d/q '[:find ?sequel
            :in $ % ?title
            :where
            [?m :movie/title ?title]
            (sequels ?m ?s)
            [?s :movie/title ?sequel]]
          db
          '[[(sequels ?m1 ?m2)
             [?m1 :movie/title ?title]
             [?m1 :movie/sequel ?m2]]
            [(sequels ?m1 ?m2)
             [?m :movie/sequel ?m2]
             (sequels ?m1 ?m)]]
          "Mad Max")
     )]

  :rcf)

